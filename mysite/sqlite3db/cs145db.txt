drop table products_item;
drop table products_tracklist;
drop table price_history;

CREATE TABLE "products_item" (
    "id" integer NOT NULL PRIMARY KEY,
    "product_id" varchar(20) NOT NULL,
    "store" varchar(10) NOT NULL,
    "name" varchar(30) NOT NULL,
    "price" decimal NOT NULL,
    "url" varchar(200) NOT NULL,
    "price_date" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (product_id, store),
    index product_identifier (product_id, store)
);

CREATE TABLE "products_tracklist" (
    "id" integer NOT NULL PRIMARY KEY,
    "user_id" integer NOT NULL REFERENCES "auth_user" ("id"),
    "item_id" integer NOT NULL REFERENCES "products_item" ("id"),
    index user_products_list (user_id)
);

create table price_history (
    id integer not null primary key,
    item_id integer not null references products_item (id),
    price decimal not null,
    price_date timestamp default current_timestamp
);

commit;

drop table auth_user;

CREATE TABLE "auth_user" (
    "id" integer NOT NULL PRIMARY KEY,
    "username" varchar(30) NOT NULL UNIQUE,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL,
    "email" varchar(75) NOT NULL,
    "password" varchar(128) NOT NULL,
    "is_staff" bool NOT NULL,
    "is_active" bool NOT NULL,
    "is_superuser" bool NOT NULL,
    "last_login" datetime NOT NULL,
    "date_joined" datetime NOT NULL
);


//-------------------------------------------------------------
//TODO optimize with bulk insert

When user insert a URL to keep track:
 - parse the url
 - insert/update in products_item (do select on product_id and store)
   - if exists already in products_item, update the information.
   - else insert into products_item
 - insert into products_tracklist

 pseudocode
 * parse the information
 * select id, price from products_item where product_id  = blah and store = blah;
 * if (price == null)
 *    insert into products_item values (info);
 * else if (price != new_price)
 *    update products_item set price = new_price, price_date = current timestamp where id = id;
 *    insert into price_history (item_id, price) values (id, new_price);
 * insert into products_tracklist

Backend script updating the price:
 - if product_id and store is not there: insert into products_item
 - otherwise, select the price, if different, update products_item, and insert price_history.
 
 pseudocode
 * parse the information
 * select id, price from products_item where product_id  = blah and store = blah;
 * if (price == null)
 *    insert into products_item values (info);
 * else if (price != new_price)
 *    update products_item set price = new_price, price_date = current timestamp where id = id;
 *    insert into price_history (item_id, price) values (id, new_price); 

Display the user account page: 
 pseudocode
 * select product_id, store, price, price_date, url from (select item_id from products_tracklist where user_id = blah) join products_item on (item_id);